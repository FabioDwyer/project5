{"version":3,"sources":["assets/saxPlayer.jpg","components/Header.js","components/data/Form.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","console","log","className","Component","Form","handleClick","setState","onClick","this","Main","class","src","saxPlayer","alt","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,uC,4LCqB5BC,G,kBAlBX,aAAe,IAAD,6BACV,8CAEAC,QAAQC,IAAI,8BAHF,E,sEAUV,OAFAD,QAAQC,IAAI,uCAGR,4BAAQC,UAAU,cACd,mE,GAbKC,cCqCNC,E,YApCX,aAAe,IAAD,8BACV,+CAiBJC,YAAc,WACVL,QAAQC,IAAI,mBACZ,EAAKK,SAAS,KAjBdN,QAAQC,IAAI,4BAHF,E,iFAOVD,QAAQC,IAAI,gC,2CAIZD,QAAQC,IAAI,+B,6CAIZD,QAAQC,IAAI,mC,+BAaZ,OAFAD,QAAQC,IAAI,qCAGR,0BAAMC,UAAU,YACZ,4BAAQK,QAASC,KAAKH,aAAtB,e,GA/BGF,a,gBC0CJM,E,YAvCX,aAAe,IAAD,6BACV,8CAEAT,QAAQC,IAAI,4BAHF,E,iFAOVD,QAAQC,IAAI,gC,2CAIZD,QAAQC,IAAI,+B,6CAIZD,QAAQC,IAAI,mC,+BAMZ,OAFAD,QAAQC,IAAI,qCAGR,0BAAMC,UAAU,YACZ,yBAAKA,UAAU,WACX,yBAAKQ,MAAM,iBACP,yBAAKR,UAAU,gBACX,yBAAKS,IAAKC,IAAWC,IAAI,qBAE7B,yBAAKX,UAAU,iBACX,oEACA,kBAAC,EAAD,c,GA/BTC,aCkBJW,E,YAnBX,aAAe,IAAD,6BACV,8CAEAd,QAAQC,IAAI,8BAHF,E,sEASV,OAFAD,QAAQC,IAAI,uCAGR,4BAAQC,UAAU,cACd,6FACA,iEACA,qD,GAdKC,aCmBNY,E,iLAVX,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUC,aCGEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.9d7480f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/saxPlayer.ddccd010.jpg\";","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    constructor() {\r\n        super();\r\n        \r\n        console.log('HeaderComponent is created');\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log('HeaderComponent is being rendered..');\r\n\r\n        return(\r\n            <header className=\"App-header\">\r\n                <h1>Jazz and Blues Concerts Finder</h1>\r\n            </header>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        console.log('FormComponent is created');\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('FormComponent has mounted!');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log('FormComponent is updated!');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('HeaderComponent is unmounted!');\r\n    }\r\n    \r\n    handleClick = () => {\r\n        console.log('BUTTON PRESSED!');\r\n        this.setState({\r\n            // Do some shit inside here!\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('FormComponent is being rendered..');\r\n\r\n        return (\r\n            <form className=\"App-form\">\r\n                <button onClick={this.handleClick}>Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Form from './data/Form';\r\nimport saxPlayer from '../assets/saxPlayer.jpg';\r\n\r\nclass Main extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        console.log('MainComponent is created');\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('MainComponent has mounted!');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log('MainComponent is updated!');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('HeaderComponent is unmounted!');\r\n    }\r\n\r\n    render() {\r\n        console.log('MainComponent is being rendered..');\r\n\r\n        return (\r\n            <main className=\"App-main\">\r\n                <div className=\"wrapper\">\r\n                    <div class='flexContainer'>\r\n                        <div className=\"imgConatiner\">\r\n                            <img src={saxPlayer} alt=\"Jazz sax player\"/>\r\n                        </div>\r\n                        <div className=\"formContainer\">\r\n                            <h2>Select a Country and a Musical Genre</h2>\r\n                            <Form />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        console.log('FooterComponent is created');\r\n    }\r\n\r\n    render() {\r\n        console.log('FooterComponent is being rendered..');\r\n\r\n        return (\r\n            <footer className=\"App-footer\">\r\n                <h4>App created with React by Fabio Dwyer for Juno College, 2020.</h4>\r\n                <h5>API courtesy of Ticketmaster &copy;</h5>\r\n                <h6>&copy; Fabio Dwyer</h6>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\n// Custom Imports:\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}