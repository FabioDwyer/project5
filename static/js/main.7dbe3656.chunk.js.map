{"version":3,"sources":["components/Header.js","components/ShowsToDisplay.js","components/Form.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","ShowsToDisplay","props","console","log","showResults","map","show","index","key","name","dates","start","localDate","localTime","_embedded","venues","src","images","url","alt","Form","handleCountryChange","e","target","value","setState","countrySelection","handleGenreChange","genreSelection","handleClick","preventDefault","axios","method","responseType","params","apikey","classificationName","countryCode","state","genreId","then","response","data","events","shows","this","action","id","onChange","type","onClick","length","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7dbe3656.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    // constructor() {\r\n    //     super();\r\n        \r\n    //     console.log('HeaderComponent is created');\r\n    // }\r\n\r\n\r\n    render() {\r\n\r\n        return(\r\n            <header className=\"App-header\">\r\n                <div className=\"wrapper\">\r\n                    <h1>Jazz and Blues Concerts Finder</h1>\r\n                </div>\r\n            </header>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n// Component to print the shows to the page\r\n// No state needed here! FUNCTION COMPONENT\r\n\r\nfunction ShowsToDisplay(props) {\r\n    console.log('Show results ', props.showResults);\r\n\r\n    return (\r\n        <div className='results'>\r\n            <h2>Results for your search:</h2>\r\n            \r\n            { props.showResults.map( (show, index) => \r\n                {\r\n                    console.log(show);\r\n                    return (\r\n                            <ul className = \"results\">\r\n                                <li key={index}>\r\n                                    <h2>{show.name}</h2>\r\n                                    <p>Date: {show.dates.start.localDate}</p> \r\n                                    <p>Time: {show.dates.start.localTime}</p>\r\n                                    <h3>Venue: {show._embedded.venues[0].name}</h3>\r\n                                    <div className=\"imgContainer\">\r\n                                        <img src={show.images[8].url} alt=\"Artist display\" />\r\n                                    </div>\r\n                                    {/* <p>{show.priceRanges[0].currency}</p>  */}\r\n                                    {/* <p>{show.priceRanges[0].min}</p> */}\r\n                                    {/* <p>{show.priceRanges[0].max}</p>    */}\r\n                                </li>\r\n                            </ul>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowsToDisplay;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ShowsToDisplay from './ShowsToDisplay';\r\n\r\nclass Form extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            countrySelection: \"\",\r\n            genreSelection: \"\",\r\n            shows: []\r\n        }\r\n    }\r\n    \r\n    \r\n    handleCountryChange = (e) => {\r\n        console.log('Selection Country has changed', e.target.value);\r\n\r\n        this.setState({\r\n            countrySelection: e.target.value\r\n        }) \r\n    }\r\n\r\n    handleGenreChange = (e) => {\r\n        console.log('Selection Genre has changed', e.target.value);\r\n\r\n        this.setState({\r\n            genreSelection: e.target.value,\r\n        })\r\n    }\r\n    \r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        console.log('BUTTON PRESSED!');\r\n        \r\n        // Axios Call here\r\n        const apikey = 'xJRCV569Cb2TTGYIhYRCDph0aALGV9q1';\r\n\r\n        \r\n        axios({\r\n            url: 'https://app.ticketmaster.com/discovery/v2/events.json' ,\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                apikey: apikey,\r\n                classificationName: 'music',\r\n                countryCode: this.state.countrySelection,\r\n                genreId: this.state.genreSelection,\r\n            }\r\n        }).then((response) => {\r\n            console.log(response.data._embedded.events);\r\n\r\n            this.setState({\r\n                shows: response.data._embedded.events\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        return (\r\n            <div>\r\n                <form className=\"App-form\" action=\"submit\">\r\n                    <div className=\"flexSelect\">\r\n                        <select name=\"country\" id=\"country\" onChange={this.handleCountryChange}>\r\n                            <option value=\"\">Select a Country</option>\r\n                            <option value=\"CA\">Canada</option>\r\n                            <option value=\"US\">United States</option>\r\n                        </select>\r\n                        <select name=\"genre\" id=\"genre\" onChange={this.handleGenreChange}>\r\n                            <option value=\"\">Select a Musical Genre</option>\r\n                            <option value=\"KnvZfZ7vAvd\">Blues</option>\r\n                            <option value=\"KnvZfZ7vAvE\">Jazz</option>\r\n                        </select>\r\n                    </div>\r\n                    <button type=\"submit\" \r\n                    onClick={this.handleClick}\r\n                    >Find Shows</button>\r\n                </form>\r\n                {\r\n                    this.state.shows.length === 0 ? null : <ShowsToDisplay showResults = {this.state.shows} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nimport Form from './Form';\r\n\r\nclass Main extends Component {\r\n    // constructor() {\r\n    //     super();\r\n    // }\r\n\r\n\r\n    render() { \r\n        return (\r\n            <main className=\"App-main\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"formContainer\">\r\n                        <h2>Select a Country and a Musical Genre</h2> \r\n                        <Form />\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    // constructor() {\r\n    //     super();\r\n\r\n    //     console.log('FooterComponent is created');\r\n    // }\r\n\r\n    render() {\r\n        // console.log('FooterComponent is being rendered..');\r\n\r\n        return (\r\n            <footer className=\"App-footer\">\r\n                <div className=\"wrapper\">\r\n                    <h4>App created with React by Fabio Dwyer for Juno College, 2020. &copy;</h4>\r\n                    <h5>API courtesy of Ticketmaster &copy; | Photo by Janine Robinson on Unsplash</h5>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\n// Custom Imports:\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\n\nclass App extends Component {\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"flexApp\">\n          <Header />\n          <Main />        \n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}